## Thanks to Cees-Jan Kiewiet: https://blog.wyrihaximus.net/2016/11/running-php-unit-tests-on-windows-using-appveyor-and-chocolatey/

## Versioning pattern
version: '{branch} - Build #{build}'

## Disable unneeded features
build: false
deploy: false
platform:
  - x64
clone_folder: C:\projects\userfrosting

## Test against various PHP versions
environment:
  fast_finish: true
  matrix:
    - php_version: "5.6"
    - php_version: "7.0"
    - php_version: "7.1"
    - php_version: "7.2"
    #- php_version: "7.3"

## Cache composer, chocolatey and php.
cache:
  # Composer
  - '%LOCALAPPDATA%\Composer\files -> composer.lock'
  - composer.phar
  # Cache chocolatey packages
  - C:\ProgramData\chocolatey\bin -> .appveyor.yml
  - C:\ProgramData\chocolatey\lib -> .appveyor.yml
  # Cache php install
  - c:\tools\php -> .appveyor.yml

## Set up environment variables
init:
  - SET PATH=C:\Program Files\OpenSSL;c:\tools\php;C:\tools\composer;%PATH%
  - SET COMPOSER_NO_INTERACTION=1
  - SET ANSICON=121x90 (121x90)
services:
  - mssql2014

## Install PHP and composer, and run the appropriate composer command
install:
    - ps: |
        # Check if installation is cached
        if (!(Test-Path c:\tools\php)) {
          appveyor-retry cinst --params '""/InstallDir:C:\tools\php""' --ignore-checksums -y php --version ((choco search php --exact --all-versions -r | select-string -pattern $env:php_version | sort { [version]($_ -split '\|' | select -last 1) } -Descending | Select-Object -first 1) -replace '[php|]','')
          # install sqlite
          appveyor-retry cinst -y sqlite
          Get-ChildItem -Path c:\tools\php
          cd c:\tools\php

          # Set PHP environment items that are always needed
          copy php.ini-production php.ini
          Add-Content php.ini "`n date.timezone=UTC"
          Add-Content php.ini "`n extension_dir=ext"
          Add-Content php.ini "`n memory_limit=1G"
          Add-Content php.ini "`n extension=php_openssl.dll"
          Add-Content php.ini "`n extension=php_mbstring.dll"
          Add-Content php.ini "`n extension=php_fileinfo.dll"
          Add-Content php.ini "`n extension=php_pdo_sqlite.dll"
          Add-Content php.ini "`n extension=php_sqlite3.dll"
          Add-Content php.ini "`n extension=php_curl.dll"
          Add-Content php.ini "`n extension=php_gd2.dll"

          # Get and install the MSSQL DLL's
          $DLLVersion = "5.2.0"
          cd c:\tools\php\ext
          If ($env:php_version -eq "7.2") {
            $source = "https://windows.php.net/downloads/pecl/releases/sqlsrv/$($DLLVersion)/php_sqlsrv-$($DLLVersion)-$($env:php_version)-nts-vc15-x64.zip"
            $destination = "c:\tools\php\ext\php_sqlsrv-$($DLLVersion)-$($env:php_version)-nts-vc15-x64.zip"
            Invoke-WebRequest $source -OutFile $destination
            7z x -y php_sqlsrv-$($DLLVersion)-$($env:php_version)-nts-vc15-x64.zip > $null
            $source = "https://windows.php.net/downloads/pecl/releases/pdo_sqlsrv/$($DLLVersion)/php_pdo_sqlsrv-$($DLLVersion)-$($env:php_version)-nts-vc15-x64.zip"
            $destination = "c:\tools\php\ext\php_pdo_sqlsrv-$($DLLVersion)-$($env:php_version)-nts-vc15-x64.zip"
            Invoke-WebRequest $source -OutFile $destination
            7z x -y php_pdo_sqlsrv-$($DLLVersion)-$($env:php_version)-nts-vc15-x64.zip > $null
          } ElseIf ($env:php_ver_target -eq "5.6") {
            $source = "https://cdn.joomla.org/ci/php-sqlsrv.zip"
            $destination = "c:\tools\php\php-sqlsrv.zip"
            Invoke-WebRequest $source -OutFile $destination
            #appveyor-retry appveyor DownloadFile https://cdn.joomla.org/ci/php-sqlsrv.zip
            7z x php-sqlsrv.zip > $null
            copy SQLSRV\php_sqlsrv_56_nts.dll ext\php_sqlsrv.dll
            copy SQLSRV\php_pdo_sqlsrv_56_nts.dll ext\php_pdo_sqlsrv.dll
          } Else {
            $source = "https://windows.php.net/downloads/pecl/releases/sqlsrv/$($DLLVersion)/php_sqlsrv-$($DLLVersion)-$($env:php_version)-nts-vc14-x64.zip"
            $destination = "c:\tools\php\ext\php_sqlsrv-$($DLLVersion)-$($env:php_version)-nts-vc14-x64.zip"
            Invoke-WebRequest $source -OutFile $destination
            7z x -y php_sqlsrv-$($DLLVersion)-$($env:php_version)-nts-vc14-x64.zip > $null
            $source = "https://windows.php.net/downloads/pecl/releases/pdo_sqlsrv/$($DLLVersion)/php_pdo_sqlsrv-$($DLLVersion)-$($env:php_version)-nts-vc14-x64.zip"
            $destination = "c:\tools\php\ext\php_pdo_sqlsrv-$($DLLVersion)-$($env:php_version)-nts-vc14-x64.zip"
            Invoke-WebRequest $source -OutFile $destination
            7z x -y php_pdo_sqlsrv-$($DLLVersion)-$($env:php_version)-nts-vc14-x64.zip > $null
          }
          Remove-Item c:\tools\php\* -include .zip
          cd c:\tools\php
          Add-Content php.ini "`nextension=php_sqlsrv.dll"
          Add-Content php.ini "`nextension=php_pdo_sqlsrv.dll"
          Add-Content php.ini "`n"

          # download Composer
          if (!(Test-Path C:\tools\composer)) {
            New-Item -path c:\tools -name composer -itemtype directory
          }
          if (!(Test-Path c:\tools\composer\composer.phar)) {
            appveyor-retry appveyor DownloadFile https://getcomposer.org/composer.phar -Filename C:\tools\composer\composer.phar
            Set-Content -path 'C:\tools\composer\composer.bat' -Value ('@php C:\tools\composer\composer.phar %*')
          }
        }
    # install composer dependencies
    - cd C:\projects\userfrosting
    - appveyor-retry composer self-update

before_test:
  # Database setup for MSSQL
  # https://github.com/joomla-framework/database
  # http://www.drupalonwindows.com/en/blog/continuous-integration-and-testing-drupal-appveyor
  - ps: sqlcmd -b -E -S "localhost\SQL2014" -Q "CREATE DATABASE userfrosting"
  # Copy sprinkle file
  - echo F | xcopy app\sprinkles.example.json app\sprinkles.json /y
  # Setup SQLite
  # - echo > userfrosting.db
  # Setup .env
  - echo UF_MODE="debug" > app/.env
  - echo DB_DRIVER="sqlsrv" >> app/.env
  - echo DB_HOST="localhost\SQL2014" >> app/.env
  - echo DB_PORT="1433" >> app/.env
  - echo DB_NAME="userfrosting" >> app/.env
  - echo DB_USER="sa" >> app/.env
  - echo DB_PASSWORD="Password12!" >> app/.env
  - echo TEST_DB="default" >> app/.env
  # Install Composer dependencies
  - appveyor-retry composer update --no-progress --no-interaction
  # Setup UserFrosting
  - php bakery debug
  - php bakery build-assets
  - php bakery migrate

## Run the actual test
test_script:
  - vendor/bin/phpunit
